kind: pipeline
name: Linux AMD64
platform:
  os: linux
  arch: amd64

steps:

  - name: Restore Cache
    image: meltwater/drone-cache
    settings:
      backend: "filesystem"
      cache_key: '{{ .Repo.Name }}_{{ checksum "conan/conanfile.py" }}_linux_{{ arch }}'
      restore: true
      archive_format: "gzip"
      filesystem_cache_root: /cache_dir
      mount:
        - conan_data
    volumes:
      - name: cache_volume
        path: /cache_dir

  - name: Build
    image: transmitron_linux_amd64
    pull: if-not-exists
    user: 0
    environment:
      CONAN_USER_HOME: /drone/src/conan_data/linux/amd64
    commands:
      - conan profile new --force default --detect
      - conan profile update settings.compiler.libcxx=libstdc++11 default
      - conan config set general.revisions_enabled=1
      - conan remote add -f bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan
      - mkdir build-release-linux-amd64
      - cd    build-release-linux-amd64
      - conan install ../conan/ --build=missing
      - cmake -DCMAKE_MODULE_PATH=$PWD -DCMAKE_BUILD_TYPE=Release ..
      - echo "Building with $(nproc) threads."
      - make -j $(nproc)

  - name: Rebuild Cache
    image: meltwater/drone-cache
    settings:
      backend: "filesystem"
      rebuild: true
      archive_format: "gzip"
      cache_key: '{{ .Repo.Name }}_{{ checksum "conan/conanfile.py" }}_linux_{{ arch }}'
      backend_operation_timeout: "5m0s"
      filesystem_cache_root: /cache_dir/
      mount:
        - conan_data
    volumes:
      - name: cache_volume
        path: /cache_dir

volumes:
  - name: cache_volume
    host:
      path: /tmp/drone/cache

---

kind: pipeline
name: Windows AMD64
platform:
  os: linux
  arch: amd64

steps:

  - name: Restore Cache
    image: meltwater/drone-cache
    settings:
      backend: "filesystem"
      cache_key: '{{ .Repo.Name }}_{{ checksum "conan/conanfile.py" }}_windows_{{ arch }}'
      restore: true
      archive_format: "gzip"
      filesystem_cache_root: /cache_dir
      mount:
        - conan_data
    volumes:
      - name: cache_volume
        path: /cache_dir

  - name: Build
    image: transmitron_windows_amd64
    pull: if-not-exists
    user: 0
    environment:
      CONAN_USER_HOME: /drone/src/conan_data/windows/amd64
    commands:
      - conan profile new --force default --detect
      - cp /workspace/windows $CONAN_USER_HOME/.conan/profiles/windows
      - conan config set general.revisions_enabled=1
      - conan remote add -f bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan
      - mkdir build-release-windows-amd64
      - cd    build-release-windows-amd64
      - conan install ../conan/ --profile=windows --build=missing
      - cmake -DCMAKE_MODULE_PATH=$PWD -DCMAKE_TOOLCHAIN_FILE=/opt/cmake-toolchains/linux-x86_64-to-windows-x86_64.cmake -DCMAKE_BUILD_TYPE=Release ..
      - echo "Building with $(nproc) threads."
      - make -j $(nproc)

  - name: Rebuild Cache
    image: meltwater/drone-cache
    settings:
      backend: "filesystem"
      rebuild: true
      archive_format: "gzip"
      cache_key: '{{ .Repo.Name }}_{{ checksum "conan/conanfile.py" }}_windows_{{ arch }}'
      backend_operation_timeout: "5m0s"
      filesystem_cache_root: /cache_dir/
      mount:
        - conan_data
    volumes:
      - name: cache_volume
        path: /cache_dir

volumes:
  - name: cache_volume
    host:
      path: /tmp/drone/cache
